--UpdateProductDescription

CREATE OR REPLACE PROCEDURE UpdateProductDescription(
  p_IDPRODUCT IN NUMBER,
  newDescription IN VARCHAR2
) AS
BEGIN
  DBMS_OUTPUT.PUT_LINE('idProduct: ' || p_IDPRODUCT);

  UPDATE BB_product
  SET DESCRIPTION = newDescription
  WHERE IDPRODUCT = p_IDPRODUCT;
END;
/


--get Productid & name

CREATE OR REPLACE PROCEDURE getProductidname(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
    SELECT idproduct, productname FROM BB_product;
END;



--Update Shipping status information

CREATE OR REPLACE PROCEDURE STATUS_SHIP_SP (
    p_idstatus IN NUMBER,
    p_idstage IN NUMBER,
    p_date IN DATE,
    p_notes IN VARCHAR2,
    p_shipper IN VARCHAR2,
    p_shipnum IN VARCHAR2
)
IS
    v_count NUMBER;
BEGIN
        UPDATE bb_basketstatus
        SET idstage = p_idstage,
            dtstage = p_date,
            notes = p_notes,
            shipper = p_shipper,
            shippingnum = p_shipnum
        WHERE idstatus = p_idstatus;
    COMMIT;
END STATUS_SHIP_SP;
/

--Create new shipping status information

CREATE OR REPLACE PROCEDURE STATUS_SHIP_NEW (
    p_idstage IN NUMBER,
    p_date IN DATE,
    p_notes IN VARCHAR2,
    p_shipper IN VARCHAR2,
    p_shipnum IN VARCHAR2
)
IS
BEGIN
    INSERT INTO bb_basketstatus (idstatus, idbasket, idstage, dtstage, notes, shipper, shippingnum)
    VALUES (bb_status_seq.NEXTVAL, NULL, p_idstage, p_date, p_notes, p_shipper, p_shipnum);
    
    COMMIT;
END STATUS_SHIP_NEW;
/

--Gets IdStatus from BB_BASKETSTATUS table in order to make dropdown menu

CREATE OR REPLACE PROCEDURE GET_IDSTATUS_OPTIONS (
    p_options OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_options FOR
    SELECT DISTINCT idstatus
    FROM bb_basketstatus;
END GET_IDSTATUS_OPTIONS;
/

BEGIN
GET_IDSTATUS_OPTIONS();
END;

--Get all Basket info to generate the page
CREATE OR REPLACE PROCEDURE GetAllBaskets(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM BB_Basket;
END;


--Calculate tax

CREATE OR REPLACE FUNCTION tax_cost_sp (
    state_code          bb_tax.state%TYPE,
    subtotal            NUMBER
)
RETURN NUMBER IS
    sv_tax_amt          NUMBER(7,2);
    sv_tax_rate         NUMBER;
BEGIN
    
    SELECT bt.taxrate INTO sv_tax_rate 
    FROM bb_tax bt
    WHERE bt.state = UPPER(state_code);    
    sv_tax_amt := sv_tax_rate * subtotal;
    RETURN sv_tax_amt;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            sv_tax_amt := 0;        
        RETURN sv_tax_amt;

END tax_cost_sp;


--Determine sale or not

CREATE OR REPLACE FUNCTION ck_sale_sf (
    p_date          VARCHAR2,
    p_product_id    bb_product.idproduct%TYPE
)
RETURN VARCHAR2 IS
    sv_sale_or_not     VARCHAR2(15);
    sv_date         DATE            := TO_DATE(p_date,'YYYY-MM-DD');
BEGIN
    SELECT CASE
        WHEN sv_date BETWEEN salestart AND saleend 
            THEN 'SALE!'
            ELSE 'GREAT DEAL'
        END
        INTO sv_sale_or_not
    FROM bb_product
    WHERE idproduct = p_product_id;
    RETURN sv_sale_or_not;
END;